<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
  <name>superquadric-grasp</name>
  <doxygen-group></doxygen-group>
  <description>Framework for grasping pose computation</description>
  <copypolicy> Released under the terms of the GNU GPL v2.0 .</copypolicy>
  <version> 1.0</version>

  <description-long>
  This module provides an grasping pose computation tool based on superquadric functions.
A tutorial on how to use the module is provided in the dedicated repository <a href="https://github.com/robotology/superquadric-grasp/tree/master/tutorial"><b>tutorial</b></a>.

This page illustrates the main parameters of the module (Section <b>Parameters</b>), the available ports and services.
The modules parameters are labeled as standard and advanced. Note: change the advanced parameters only if you are familiar with the implemented techniques.
  </description-long>

  <arguments>
    <param default="icubSim" desc="Robot used in the test (standard parameter).">robot</param>
    <param default="right" desc="Hand used (standard parameter).">left_or_right</param>
 <param default="z" desc="Appraching direction in hand frame.Possible values: z or xz (standard parameter).">dir</param>
 <param default="left" desc="Eyes used to get image (standard parameter).">eye</param>
 <param default="true" desc="Acquire an external point cloud or not online or not (standard parameter).">mode_online</param>
 <param default="0.05" desc="Distance used for approach on x axis (standard parameter).">distance</param>
 <param default="0.05" desc="Distance used for approach on z axis (standard parameter).">distance1</param>
 <param default="false" desc="Save or not the results (standard parameter).">save_poses</param>
 <param default="true" desc="Visualize or not the computed pose (standard parameter).">visualization</param>
 <param default="false" desc="Grasp or not the object once the final pose is reached (standard parameter).">grasp</param>
 <param default="true" desc="Show the hand ellipsoid or not (standard parameter).">show_hand</param>
 <param default="true" desc="Look the object or not (standard parameter).">look_object</param>
 <param default="true" desc="If on, only the pose is shown, without the trajectory (standard parameter).">show_only_pose</param>
 <param default="1.0" desc="Trajectory time (standard parameter).">traj_time</param>
 <param default="0.001" desc="Trajectory tolerance (standard parameter).">traj_tol</param>
<param default="0.15" desc="Quantity on z axis for object lifting (standard parameter).">lift_z</param>
 <param default="(0.0 0.0 1.0 0.18)" desc="Plane representing the table (advanced parameter).">plane</param>
 <param default="(0.05 0.0 0.0)" desc="Ellipsoid displacement with respect to hand reference frame (advanced parameter).">displacement</param>
 <param default="1e-3" desc="Tolerance for Ipopt solver (advanced parameter).">tol</param>
 <param default="1e-2" desc="Tolerance of constraints in Ipopt solver (advanced parameter).">constr_viol_tol</param>
 <param default="0" desc="Acceptable iter in Ipopt solver (advanced parameter).">acceptable_iter</param>
 <param default="1e8" desc="Maximum number of iterations in Ipopt solver (advanced parameter).">max_iter</param>
 <param default="monotone" desc="Mu strategy in Ipopt solver (advanced parameter).">mu_strategy</param>
 <param default="none" desc="NLP scaling method in Ipopt solver (advanced parameter).">nlp_scaling_method</param>
  </arguments>

  <authors>
    <author email="giulia.vezzani@iit.it"> Giulia Vezzani </author>
  </authors>

  <data>
      <input>
          <type>yarp::sig::ImageOfPixelRgb</type>
          <port carrier="tcp">/superquadric-grasp/img:i</port>
          <description>
            sends the image from the left camera 
          </description>
      </input>
      <output>
          <type>yarp::sig::ImageOfPixelRgb</type>
          <port carrier="tcp">/superquadric-grasp/img:o</port>
          <description>
            shows the image from the left camera with the computed pose
          </description>
      </output>
      <input>
          <type>yarp::sig::Bottle</type>
          <port carrier="rpc">/superquadric-grasp/superq:rpc</port>
          <description>
            asks superquadric object model 
          </description>
      </input>

  </data>

  <services>
    <server>
      <type>superquadricGrasp_IDL</type>
      <idl>idl.thrift</idl>
      <port>/superquadric-grasp/rpc</port>
      <description>service port</description>
    </server>
  </services>

</module>
